import numpy as np
from collections import defaultdict
import os,sys,time,subprocess
from tkinter import _flatten
py_version = sys.version.split('.')[0]
if py_version == '2':
	open = io.open
else:
	unicode = str
def makedirs(fld):
	if not os.path.exists(fld):
		os.makedirs(fld)
def _write_xml(paths_in, path_out, role, n_lines=None):
	# prepare .xml files for mteval-v14c.pl (calc_nist_bleu)
	# role = 'src', 'hyp' or 'ref'

	lines = [
		'<?xml version="1.0" encoding="UTF-8"?>',
		'<!DOCTYPE mteval SYSTEM "">',
		'<!-- generated by https://github.com/golsun/NLP-tools -->',
		'<!-- from: %s -->'%paths_in,
		'<!-- as inputs for ftp://jaguar.ncsl.nist.gov/mt/resources/mteval-v14c.pl -->',
		'<mteval>',
		]

	for i_in, path_in in enumerate(paths_in):

		# header ----

		if role == 'src':
			lines.append('<srcset setid="unnamed" srclang="src">')
			set_ending = '</srcset>'
		elif role == 'hyp':
			lines.append('<tstset setid="unnamed" srclang="src" trglang="tgt" sysid="unnamed">')
			set_ending = '</tstset>'
		elif role == 'ref':
			lines.append('<refset setid="unnamed" srclang="src" trglang="tgt" refid="ref%i">'%i_in)
			set_ending = '</refset>'
		
		lines.append('<doc docid="unnamed" genre="unnamed">')

		# body -----

		if role == 'src':
			body = ['__src__'] * n_lines
		else:
			if path_in=='':
				with open(path_in, 'r', encoding='utf-8') as f:
					body = f.readlines()
				if n_lines is not None:
					body = body[:n_lines]
			else:
				body=path_in
				if n_lines is not None:
					body = body[:n_lines]
		#for i in range(len(body)):
		i = 0
		for b in body:
			line = b.strip('\n')
			line = line.replace('&',' ').replace('<',' ')		# remove illegal xml char
			# if len(line) > 0:
			lines.append('<p><seg id="%i"> %s </seg></p>'%(i + 1, line))
			i += 1

		# ending -----

		lines.append('</doc>')
		if role == 'src':
			lines.append('</srcset>')
		elif role == 'hyp':
			lines.append('</tstset>')
		elif role == 'ref':
			lines.append('</refset>')

	lines.append('</mteval>')
	with open(path_out, 'w', encoding='utf-8') as f:
		f.write(unicode('\n'.join(lines)))

class Nist:
    def __init__(self, n_lines=None):
        self.n_lines=None
    def compute_score(self, gts, res):
        assert(gts.keys() == res.keys())
        fld_out="./nist/temp"
        makedirs(fld_out)

        if self.n_lines is None:
            self.n_lines = len(gts.keys())	
        # import pdb; pdb.set_trace()
        _write_xml([''], fld_out + '/src.xml', 'src', n_lines=self.n_lines)
        _write_xml(list(_flatten(list(res.values()))), fld_out + '/hyp.xml', 'hyp')#, n_lines=n_lines)
        _write_xml(sum(list(gts.values()), []), fld_out + '/ref.xml', 'ref')#, n_lines=n_lines)

        time.sleep(1)
        cmd = [
            'perl','./nist/3rdparty/mteval-v14c.pl',
            '-s', '%s/src.xml'%fld_out,
            '-t', '%s/hyp.xml'%fld_out,
            '-r', '%s/ref.xml'%fld_out,
            ]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        # import pdb; pdb.set_trace()
        output, error = process.communicate()

        lines = output.decode().split('\n')
        print(lines)
        try:
            nist_list = lines[-6].strip('\r').split()[1:5]
            return [float(nist_list[1]),float(nist_list[3])], [float(x) for x in nist_list]

        except Exception:
            print('mteval-v14c.pl returns unexpected message')
            print('cmd = '+str(cmd))
            print(output.decode())
            print(error.decode())
            return [-1]*2, [-1]*4
    def method(self):
        return "NIST"